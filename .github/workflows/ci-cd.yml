name: Consolidated CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_BACKEND: ${{ secrets.DOCKERHUB_USERNAME }}/ai-trading-backend
  DOCKER_IMAGE_FRONTEND: ${{ secrets.DOCKERHUB_USERNAME }}/ai-trading-frontend
  DOCKER_TAG: ${{ github.sha }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  backend-ci:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Lint, format, and type check
      run: |
        pip install black flake8 mypy
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black . --check
        mypy app/
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        TESTING: "true"
      run: |
        pip install pytest-cov
        pytest --cov=app --cov-report=xml tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm install

    - name: Lint and format
      run: npm run lint

    - name: Run tests
      run: npm run test

    - name: Build
      run: npm run build

  build-and-push:
    needs: [backend-ci, frontend-ci]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.DOCKER_IMAGE_BACKEND }}:${{ env.DOCKER_TAG }},${{ env.DOCKER_IMAGE_BACKEND }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_BACKEND }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE_BACKEND }}:buildcache,mode=max

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.DOCKER_IMAGE_FRONTEND }}:${{ env.DOCKER_TAG }},${{ env.DOCKER_IMAGE_FRONTEND }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_FRONTEND }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE_FRONTEND }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        environment: [staging, production]

    environment: 
      name: ${{ matrix.environment }}
      url: https://${{ matrix.environment }}.ai-trading-system.com
    
    steps:
    - name: Deploy to ${{ matrix.environment }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets[format('{0}_SSH_HOST', upper(matrix.environment))] }}
        username: ${{ secrets[format('{0}_SSH_USERNAME', upper(matrix.environment))] }}
        key: ${{ secrets[format('{0}_SSH_KEY', upper(matrix.environment))] }}
        script: |
          cd /path/to/app
          docker-compose pull
          docker-compose up -d
